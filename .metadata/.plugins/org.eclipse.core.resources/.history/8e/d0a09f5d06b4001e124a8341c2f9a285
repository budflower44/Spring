package com.myweb.www.controller;

import java.security.Principal;

import javax.servlet.http.HttpServletRequest;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.myweb.www.security.MemberVO;
import com.myweb.www.service.MemberService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@RequestMapping("/member/*")
@Controller
public class MemberController {
	
	private final MemberService msv;
	private final BCryptPasswordEncoder bcEncoder;
	
	@GetMapping("/register")
	public void registerPage() {}
	
	@PostMapping("/register")
	public String register(MemberVO mvo) {
		mvo.setPwd(bcEncoder.encode(mvo.getPwd()));
		log.info(">>>>>>>>>>>>>> register @@@@@@@ mvo {}"+mvo);
		int isOk = msv.insert(mvo);
		log.info(">>>>>>>>> login insert is"+(isOk>0?"OK":"Fail"));
		return "index";
	}
	
	@GetMapping("/login")
	public void loginPage(){}
	
	//@postMappting("/login") 대신 CustomAuthMemberService 로 바로 타게됨
	
	//실패했을 때
	@PostMapping("/login")
	public String loginPost(HttpServletRequest request, RedirectAttributes re) {
		//로그인 실패 시 다시 로그인 페이지로 돌아와 오류 메시지 전송
		// 다시 로그인 유도
		re.addAttribute("email", request.getAttribute("email"));
		re.addAttribute("errMsg", request.getAttribute("errMsg"));
		return "redirect:/member/login";
	}
	
	//@RequestParam("email") String email
	@GetMapping("/modify")
	public void modify(Principal p) {
		log.info("@@@@@@@@@@@@@@@@@@@ principal >> email "+p.getName())
	}
	
	
	
}
